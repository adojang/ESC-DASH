/*
 * File: KeypadBookShelve.cpp
 * Author: Wouter Pieter Willemse
 * Date: December 2, 2023
 * Description: This program opens a doors magnetic lock using a keypad matrix interface and a visual indicator in the form of an OLED Screen.
 * 
Software License Agreement

This Software License Agreement (the "Agreement") is entered into by and between Wouter Pieter Willemse ("Licensor" or "Owner") and any party who obtains a copy of the software (the "Licensee").
1. License Grant
   1.1 License. Licensor grants Licensee a non-exclusive, non-transferable, and lifetime license to use the software (the "Software") subject to the terms and conditions of this Agreement.
   1.2 Restrictions. Licensee shall not, without the prior written consent of Licensor:
       (a) Modify, adapt, alter, translate, or create derivative works from the Software;
       (b) Sell, lease, sublicense, distribute, or otherwise transfer the Software to any third party.

2. Ownership
   2.1 Ownership. Licensor retains all right, title, and interest in and to the Software, including all intellectual property rights.

3. Restrictions on Changes and Sales
   3.1 Changes. Licensee shall not modify, adapt, or alter the Software in any way without the prior written consent of Licensor.
   3.2 Sales. Licensee shall not sell, lease, sublicense, distribute, or otherwise transfer the Software to any third party without the express written consent of Licensor.

4. Term
   4.1 Term. This Agreement is effective until terminated. The lifetime license granted under Section 1.1 shall remain in effect for the lifetime of the Licensee.

5. Termination
   5.1 Termination. This Agreement may be terminated by Licensor immediately upon written notice if Licensee breaches any provision of this Agreement.

6. Governing Law
   6.1 Governing Law. This Agreement shall be governed by and construed in accordance with the laws of [Your Jurisdiction].
IN WITNESS WHEREOF, the parties hereto have executed this Software License Agreement as of the Effective Date.

Wouter Pieter Willemse                      Wendy Skinner
Licensor                                    Licensee
79 Tafelberg Street, Durbanville            Tyger Valley Shopping Centre,Durbanville
 */

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Keypad.h>
#include <string.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define ROWS  4
#define COLS  3
#define TrigerPin 5
char keyMap[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};
 
uint8_t rowPins[ROWS] = {14, 27, 26, 25}; // GIOP14, GIOP27, GIOP26, GIOP25
uint8_t colPins[COLS] = {33, 32, 18};     // GIOP33, GIOP32, GIOP18
 
Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS );

int pinpos = 0;
String pin = "112415";
char keyedpin[6] = {};
int cntcorrect = 0;
String printcode = " ";
unsigned long ttimeopen = 0;
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
//Functions
// 'TagDoor', 124x64px
const unsigned char epd_bitmap_TagDoor [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 
	0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 
	0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 
	0x00, 0x7e, 0x1c, 0x60, 0x00, 0xc0, 0x01, 0x80, 0x00, 0x01, 0x80, 0x6c, 0x00, 0x01, 0xf8, 0x00, 
	0x00, 0x7e, 0x3e, 0x60, 0x00, 0xc0, 0x01, 0x80, 0x00, 0x01, 0x80, 0x6c, 0x00, 0x00, 0xf8, 0x00, 
	0x00, 0xfc, 0x63, 0x00, 0x00, 0xc0, 0x01, 0x80, 0x00, 0x01, 0x80, 0x6c, 0x00, 0x00, 0xfc, 0x00, 
	0x00, 0xf8, 0x63, 0x6f, 0x8f, 0xd9, 0x81, 0x81, 0xe3, 0x19, 0x80, 0x6c, 0x03, 0xc0, 0x7c, 0x00, 
	0x00, 0xf8, 0x60, 0x6f, 0xdf, 0xd9, 0x81, 0x83, 0xf3, 0x19, 0x8c, 0x6f, 0xc7, 0xe0, 0x7e, 0x00, 
	0x01, 0xf0, 0x60, 0x6c, 0xdc, 0xd9, 0x81, 0x87, 0x3b, 0x19, 0xde, 0xef, 0xee, 0x70, 0x3e, 0x00, 
	0x01, 0xf0, 0x60, 0x6c, 0xd8, 0xd9, 0xb9, 0x86, 0x1b, 0x18, 0xde, 0xcc, 0x6c, 0x30, 0x3e, 0x00, 
	0x01, 0xf0, 0x60, 0x6c, 0xd8, 0xd9, 0xb9, 0x86, 0x1b, 0x18, 0xf3, 0xcc, 0x6c, 0x30, 0x3e, 0x00, 
	0x01, 0xf0, 0x63, 0x6c, 0xd9, 0xd9, 0x81, 0x87, 0x3b, 0x18, 0xf3, 0xcc, 0x6e, 0x70, 0x3e, 0x00, 
	0x01, 0xf0, 0x3f, 0x6c, 0xdf, 0xdf, 0x81, 0xf3, 0xf3, 0xf8, 0x73, 0x8c, 0x67, 0xe0, 0x3e, 0x00, 
	0x01, 0xf0, 0x1e, 0x6c, 0xcf, 0x8f, 0x01, 0xf1, 0xe3, 0xf8, 0x61, 0x8c, 0x63, 0xc0, 0x3e, 0x00, 
	0x01, 0xf8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 
	0x00, 0xf8, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 
	0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
	0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 
	0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_TagDoor
};

void checkpin()
{
    cntcorrect = strcmp(pin.c_str(),printcode.c_str());
    Serial.println(pin);
    Serial.println(printcode);
    Serial.println(cntcorrect);
    if(cntcorrect == 0)
    {
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextSize(3);
    
    display.print("Portal\nOpening");
    display.display();
    ttimeopen = millis();
    delay(1000);
    digitalWrite(TrigerPin,HIGH);
    display.clearDisplay();
    display.setCursor(10,10);
    display.drawBitmap(0,0, epd_bitmap_TagDoor, 128, 64, WHITE);
    display.display();
    display.clearDisplay();
    display.drawBitmap(0,0, epd_bitmap_TagDoor, 128, 64, WHITE);
    display.display();
    }
    if(cntcorrect != 0)
    {
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextSize(3);
    display.print("Try\nAgain");
    display.display(); 
    }
  
}

void displaypin(char key)
{
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextSize(3);
    printcode = "";
    pinpos++;
    for(int i = 0; i < pinpos; i++)
    {
    display.print(keyedpin[i]);
    display.display();
    printcode = printcode + keyedpin[i];
    }
    if(pinpos > 5)
    {
        pinpos = 0;
    }
}


void setup() {
  Serial.begin(115200);
  pinMode(TrigerPin,OUTPUT);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(1000);
  display.clearDisplay();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  // Display static text
  display.println("   Who's\n   House\n   Number");
  display.display(); 
}

unsigned long ttimer = millis();

void loop() {

  char key = keypad.getKey();
  if (key) 
  {
    if(key == '#')
    {
        checkpin();
        pinpos = 0;     
    }else
    {
        keyedpin[pinpos] = key;
        displaypin(key);
    }
  }
  if(cntcorrect == 0 && ((millis() - ttimer) > 60000))
  {
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextSize(2);
    display.println("   Who's\n   House\n   Number");
    display.display(); 
    ttimer = millis();
    pinpos = 0;
  }
  if(millis() - ttimeopen > 500)
  {
    digitalWrite(TrigerPin,LOW);
  }
}

